//헤더 파일 포함
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <time.h>
#include <TZ.h>
#include <FS.h>
#include <LittleFS.h>
#include <CertStoreBearSSL.h>


/* ==================== 상수 설정 ==================== */
//제품 시리얼 번호
const String topic = "test0";

//입출력(초음파센서, 빗물감지센서, 와이파이 모듈)
const short trig = 2;
const short echo = 3;
const short rainingPin = A1;

//전원
const short lvSensor = 8;
const short rainSensor = 9;

//네트워크
#define MSG_BUFFER_SIZE (2)
const char* ssid = "wifi_name";
const char* password = "wifi_password";
const char* mqtt_server = "1befe1d1899b49688347a6c39ec340ea.s2.eu.hivemq.cloud";

//반복 속도
const short loopDelay = 1000;


/* ==================== 변수 선언 ==================== */
bool isWater = false;
long initialDistance;
unsigned long lastMsg = 0;
char msg[MSG_BUFFER_SIZE];
int value = 0;
BearSSL::CertStore certStore;
WiFiClientSecure espClient;
PubSubClient* client;


/* ==================== 초기화 함수 ==================== */
void setup() {
  //초기화
  Serial.begin(9600);
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  LittleFS.begin();

  //전원 초기화
  pinMode(lvSensor, OUTPUT);
  pinMode(rainSensor, OUTPUT);

  //초기 거리 측정
  digitalWrite(lvSensor, HIGH);
  do {
    delay(loopDelay);
    initialDistance = getDistance(true);
  } while (initialDistance < 1);
  digitalWrite(lvSensor, LOW);

  //와이파이 연결
  setup_wifi();
  int numCerts = certStore.initCertStore(LittleFS, PSTR("/certs.idx"), PSTR("/certs.ar"));
  if (numCerts == 0) {
    //연결 실패
    Serial.printf("No certs found. Did you run certs-from-mozilla.py and upload the LittleFS directory before running?\n");
    return;
  }
  BearSSL::WiFiClientSecure *bear = new BearSSL::WiFiClientSecure();
  bear->setCertStore(&certStore);

  //MQTT 서버 연결
  client = new PubSubClient(*bear);
  client->setServer(mqtt_server, 8883);
  brokerConnect();

  //전원 공급
  digitalWrite(rainSensor, HIGH);
}


/* ==================== 반복 함수 ==================== */
void loop() {
  long distance = 0;

  client->loop();

  //반복 속도 조절
  delay(loopDelay);

  //수위 및 물 감지
  if (isWater) {
    distance = getDistance(false);
  }
  else {
    isWater = waterDetect();
    return;
  }

  //정보 전송
  sendData(distance);
}


/* ==================== 정보 전송 ==================== */
inline void sendData(long level) {
  snprintf (msg, MSG_BUFFER_SIZE, "%ld", level);
  client->publish("WtLvSn/" + topic, msg);
}


/* ==================== 수위 측정 ==================== */
inline long getDistance(bool initial) {
  unsigned long duration;

  //초음파 발생
  digitalWrite(trig, HIGH);
  delay(500);
  digitalWrite(trig, LOW);

  //시간을 duration에 저장
  duration = pulseIn(echo, HIGH);

  //반환
  if (initial) {
    return (long)(duration * 0.017);
  }
  else {
    return (long)(initialDistance - duration * 0.017);
  }
}


/* ==================== 물 감지 ==================== */
inline bool waterDetect() {
  if (analogRead(rainingPin) < 500){
    digitalWrite(rainSensor, LOW);
    digitalWrite(lvSensor, HIGH);
    return true;
  }
  else{
    return false;
  }
}


/* ==================== 와이파이 연결 ==================== */
inline void setup_wifi() {
  //연결 시작
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  //연결될 때까지 대기
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

/* ==================== MQTT 서버 연결 ==================== */
inline void brokerConnect() {
  String clientId = "ESP8266Client - MyClient";
  while (!client->connected()) {
    if (client->connect(clientId.c_str(), "amor2022", "PASSWORD")) {
      break;
    }
    delay(5000);
  }
}